version: 2.1

commands:
  clone_yolov5:
    steps:
      - run:
          name: Clone YOLOv5 from github
          command: |
            git clone http://github.com/ultralytics/yolov5
#      - restore_cache:
#          key: yolov5-requirements-{{ .Branch }}-{{ checksum "yolov5/requirements.txt" }}
      - run:
          name: Load PyTorch 1.10.2 and required pip libraries
          command: |          
            cd yolov5
            pip3 install torch==1.10.2+cu113 torchvision==0.11.3+cu113 torchaudio==0.10.2+cu113 -f https://download.pytorch.org/whl/cu113/torch_stable.html
            pip install -r requirements.txt
            cd ..
#      - save_cache:
#          key: yolov5-requirements-{{ .Branch }}-{{ checksum "yolov5/requirements.txt" }}
#          paths:
#            - "~/.cache/pip"                
  load_maskdataset:
    steps:
      - run:
          name: Set up MaskDataSet from ROBOFLOW (needs registration)
          command: |
            mkdir MaskDataSet
            cd MaskDataSet
            curl -L "https://public.roboflow.com/ds/ufHXPvJekp?key=$ROBOFLOW_KEY" > roboflow.zip
            unzip -n roboflow.zip
            rm roboflow.zip
            \cp -fv  ../data.yaml .
            cd ..          
  train_with_maskdataset:
    parameters:
      train_env:
        type: string
    steps:
      - run:
          command: sudo apt install zip
      - run:
          name: Train with MaskDataSet
          command: |
            cd yolov5
            python train.py --img 416 --data ../MaskDataSet/data.yaml --cfg yolov5s.yaml --weights yolov5s.pt --batch-size 2 --epochs 300
            zip -r runs/train-result.zip runs/train/exp/weights
            cd ..
      - store_artifacts:
          path: yolov5/runs/train-result.zip
          destination: train-result_on_<< parameters.train_env >>.zip
  test_mask_detection:
    parameters:
      test_env:
        type: string
    steps:
      - run:
          command: sudo apt install zip
      - run:
          name: Test mask detection
          command: |
            cd yolov5
            python detect.py --weights ./runs/train/exp/weights/best.pt --img 640 --conf 0.25 --source ../images/face_w_mask3.jpeg
            python detect.py --weights ./runs/train/exp/weights/best.pt --img 640 --conf 0.25 --source ../images/face_w_mask4.jpeg
            python detect.py --weights ./runs/train/exp/weights/best.pt --img 640 --conf 0.25 --source ../images/face_wo_mask2.jpeg
            zip -r runs/detect-result.zip runs/detect
      - store_artifacts:
          path: yolov5/runs/detect-result.zip
          destination: detect-result_on_<< parameters.test_env >>.zip

jobs:
  train_to_test_on_gpu:
    machine:
      resource_class: gpu.nvidia.small
      image: ubuntu-2004-cuda-11.4:202110-01
    steps:
      - checkout
      - run:
          name: Check GPU status
          command: nvidia-smi
      - clone_yolov5
      - load_maskdataset
      - train_with_maskdataset:
          train_env: "gpu"

  train_to_test_on_runner:
    machine: true
    resource_class: mayoct/runner-rog
    steps:
      - checkout
      - run:
          name: Check GPU status
          command: /usr/lib/wsl/lib/nvidia-smi
      - clone_yolov5
      - load_maskdataset
      - train_with_maskdataset:
          train_env: "runner"
      - test_mask_detection:
          test_env: "runner"

workflows:
  version: 2
  workflow:
    jobs:
#      - train_to_test_on_gpu
      - train_to_test_on_runner
